/*
 * generated by Xtext 2.10.0
 */
grammar InternalFirstOrderLogic;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.sidiff.validation.laguage.fol.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.sidiff.validation.laguage.fol.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.sidiff.validation.laguage.fol.services.FirstOrderLogicGrammarAccess;

}
@parser::members {
	private FirstOrderLogicGrammarAccess grammarAccess;

	public void setGrammarAccess(FirstOrderLogicGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleConsistencyRule
entryRuleConsistencyRule
:
{ before(grammarAccess.getConsistencyRuleRule()); }
	 ruleConsistencyRule
{ after(grammarAccess.getConsistencyRuleRule()); } 
	 EOF 
;

// Rule ConsistencyRule
ruleConsistencyRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConsistencyRuleAccess().getGroup()); }
		(rule__ConsistencyRule__Group__0)
		{ after(grammarAccess.getConsistencyRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerm
entryRuleTerm
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getFunctionParserRuleCall()); }
		ruleFunction
		{ after(grammarAccess.getTermAccess().getFunctionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGetParserRuleCall()); }
		ruleGet
		{ after(grammarAccess.getFunctionAccess().getGetParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGet
entryRuleGet
:
{ before(grammarAccess.getGetRule()); }
	 ruleGet
{ after(grammarAccess.getGetRule()); } 
	 EOF 
;

// Rule Get
ruleGet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGetAccess().getGroup()); }
		(rule__Get__Group__0)
		{ after(grammarAccess.getGetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormula
entryRuleFormula
:
{ before(grammarAccess.getFormulaRule()); }
	 ruleFormula
{ after(grammarAccess.getFormulaRule()); } 
	 EOF 
;

// Rule Formula
ruleFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormulaAccess().getBinaryFormulaParserRuleCall()); }
		ruleBinaryFormula
		{ after(grammarAccess.getFormulaAccess().getBinaryFormulaParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryFormula
entryRuleBinaryFormula
:
{ before(grammarAccess.getBinaryFormulaRule()); }
	 ruleBinaryFormula
{ after(grammarAccess.getBinaryFormulaRule()); } 
	 EOF 
;

// Rule BinaryFormula
ruleBinaryFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryFormulaAccess().getIfParserRuleCall()); }
		ruleIf
		{ after(grammarAccess.getBinaryFormulaAccess().getIfParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXor
entryRuleXor
:
{ before(grammarAccess.getXorRule()); }
	 ruleXor
{ after(grammarAccess.getXorRule()); } 
	 EOF 
;

// Rule Xor
ruleXor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorAccess().getGroup()); }
		(rule__Xor__Group__0)
		{ after(grammarAccess.getXorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryFormula
entryRuleUnaryFormula
:
{ before(grammarAccess.getUnaryFormulaRule()); }
	 ruleUnaryFormula
{ after(grammarAccess.getUnaryFormulaRule()); } 
	 EOF 
;

// Rule UnaryFormula
ruleUnaryFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryFormulaAccess().getNotParserRuleCall()); }
		ruleNot
		{ after(grammarAccess.getUnaryFormulaAccess().getNotParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNot
entryRuleNot
:
{ before(grammarAccess.getNotRule()); }
	 ruleNot
{ after(grammarAccess.getNotRule()); } 
	 EOF 
;

// Rule Not
ruleNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotAccess().getGroup()); }
		(rule__Not__Group__0)
		{ after(grammarAccess.getNotAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuantifier
entryRuleQuantifier
:
{ before(grammarAccess.getQuantifierRule()); }
	 ruleQuantifier
{ after(grammarAccess.getQuantifierRule()); } 
	 EOF 
;

// Rule Quantifier
ruleQuantifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuantifierAccess().getAlternatives()); }
		(rule__Quantifier__Alternatives)
		{ after(grammarAccess.getQuantifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForAll
entryRuleForAll
:
{ before(grammarAccess.getForAllRule()); }
	 ruleForAll
{ after(grammarAccess.getForAllRule()); } 
	 EOF 
;

// Rule ForAll
ruleForAll 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForAllAccess().getGroup()); }
		(rule__ForAll__Group__0)
		{ after(grammarAccess.getForAllAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExists
entryRuleExists
:
{ before(grammarAccess.getExistsRule()); }
	 ruleExists
{ after(grammarAccess.getExistsRule()); } 
	 EOF 
;

// Rule Exists
ruleExists 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExistsAccess().getGroup()); }
		(rule__Exists__Group__0)
		{ after(grammarAccess.getExistsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression
:
{ before(grammarAccess.getTerminalExpressionRule()); }
	 ruleTerminalExpression
{ after(grammarAccess.getTerminalExpressionRule()); } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
		(rule__TerminalExpression__Alternatives)
		{ after(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantifierAccess().getForAllParserRuleCall_0()); }
		ruleForAll
		{ after(grammarAccess.getQuantifierAccess().getForAllParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getQuantifierAccess().getExistsParserRuleCall_1()); }
		ruleExists
		{ after(grammarAccess.getQuantifierAccess().getExistsParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getUnaryFormulaParserRuleCall_1()); }
		ruleUnaryFormula
		{ after(grammarAccess.getPrimaryAccess().getUnaryFormulaParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getQuantifierParserRuleCall_2()); }
		ruleQuantifier
		{ after(grammarAccess.getPrimaryAccess().getQuantifierParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getTerminalExpressionParserRuleCall_3()); }
		ruleTerminalExpression
		{ after(grammarAccess.getPrimaryAccess().getTerminalExpressionParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getGroup_0()); }
		(rule__TerminalExpression__Group_0__0)
		{ after(grammarAccess.getTerminalExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getGroup_1()); }
		(rule__TerminalExpression__Group_1__0)
		{ after(grammarAccess.getTerminalExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getGroup_2()); }
		(rule__TerminalExpression__Group_2__0)
		{ after(grammarAccess.getTerminalExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getGroup_3()); }
		(rule__TerminalExpression__Group_3__0)
		{ after(grammarAccess.getTerminalExpressionAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getValueTrueKeyword_2_1_0_0()); }
		'true'
		{ after(grammarAccess.getTerminalExpressionAccess().getValueTrueKeyword_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getValueFalseKeyword_2_1_0_1()); }
		'false'
		{ after(grammarAccess.getTerminalExpressionAccess().getValueFalseKeyword_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsistencyRule__Group__0__Impl
	rule__ConsistencyRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsistencyRuleAccess().getContextKeyword_0()); }
	'context'
	{ after(grammarAccess.getConsistencyRuleAccess().getContextKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsistencyRule__Group__1__Impl
	rule__ConsistencyRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsistencyRuleAccess().getTypeAssignment_1()); }
	(rule__ConsistencyRule__TypeAssignment_1)
	{ after(grammarAccess.getConsistencyRuleAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsistencyRule__Group__2__Impl
	rule__ConsistencyRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsistencyRuleAccess().getVariableAssignment_2()); }
	(rule__ConsistencyRule__VariableAssignment_2)
	{ after(grammarAccess.getConsistencyRuleAccess().getVariableAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsistencyRule__Group__3__Impl
	rule__ConsistencyRule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsistencyRuleAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getConsistencyRuleAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConsistencyRule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConsistencyRuleAccess().getFormulaAssignment_4()); }
	(rule__ConsistencyRule__FormulaAssignment_4)
	{ after(grammarAccess.getConsistencyRuleAccess().getFormulaAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Get__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__0__Impl
	rule__Get__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getVariableParserRuleCall_0()); }
	ruleVariable
	{ after(grammarAccess.getGetAccess().getVariableParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getGroup_1()); }
	(rule__Get__Group_1__0)*
	{ after(grammarAccess.getGetAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Get__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group_1__0__Impl
	rule__Get__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getGetContextAction_1_0()); }
	()
	{ after(grammarAccess.getGetAccess().getGetContextAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group_1__1__Impl
	rule__Get__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getGetAccess().getFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Get__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGetAccess().getFeatureAssignment_1_2()); }
	(rule__Get__FeatureAssignment_1_2)
	{ after(grammarAccess.getGetAccess().getFeatureAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getXorParserRuleCall_0()); }
	ruleXor
	{ after(grammarAccess.getIfAccess().getXorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getGroup_1()); }
	(rule__If__Group_1__0)*
	{ after(grammarAccess.getIfAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_1__0__Impl
	rule__If__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfLeftAction_1_0()); }
	()
	{ after(grammarAccess.getIfAccess().getIfLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_1__1__Impl
	rule__If__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getImpliesKeyword_1_1()); }
	'implies'
	{ after(grammarAccess.getIfAccess().getImpliesKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightAssignment_1_2()); }
	(rule__If__RightAssignment_1_2)
	{ after(grammarAccess.getIfAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group__0__Impl
	rule__Xor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getOrParserRuleCall_0()); }
	ruleOr
	{ after(grammarAccess.getXorAccess().getOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getGroup_1()); }
	(rule__Xor__Group_1__0)*
	{ after(grammarAccess.getXorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Xor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__0__Impl
	rule__Xor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getXorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXorAccess().getXorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__1__Impl
	rule__Xor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getXorKeyword_1_1()); }
	'xor'
	{ after(grammarAccess.getXorAccess().getXorKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Xor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorAccess().getRightAssignment_1_2()); }
	(rule__Xor__RightAssignment_1_2)
	{ after(grammarAccess.getXorAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
	'or'
	{ after(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getAndAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
	'and'
	{ after(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Not__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__0__Impl
	rule__Not__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotAction_0()); }
	()
	{ after(grammarAccess.getNotAccess().getNotAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__1__Impl
	rule__Not__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotKeyword_1()); }
	'not('
	{ after(grammarAccess.getNotAccess().getNotKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__2__Impl
	rule__Not__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getNotAssignment_2()); }
	(rule__Not__NotAssignment_2)
	{ after(grammarAccess.getNotAccess().getNotAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Not__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getNotAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForAll__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__0__Impl
	rule__ForAll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getForAllAction_0()); }
	()
	{ after(grammarAccess.getForAllAccess().getForAllAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__1__Impl
	rule__ForAll__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getForAllKeyword_1()); }
	'forAll('
	{ after(grammarAccess.getForAllAccess().getForAllKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__2__Impl
	rule__ForAll__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getBoundedAssignment_2()); }
	(rule__ForAll__BoundedAssignment_2)
	{ after(grammarAccess.getForAllAccess().getBoundedAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__3__Impl
	rule__ForAll__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getInKeyword_3()); }
	'in'
	{ after(grammarAccess.getForAllAccess().getInKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__4__Impl
	rule__ForAll__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getIterationAssignment_4()); }
	(rule__ForAll__IterationAssignment_4)
	{ after(grammarAccess.getForAllAccess().getIterationAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__5__Impl
	rule__ForAll__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getForAllAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__6__Impl
	rule__ForAll__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getFormulaAssignment_6()); }
	(rule__ForAll__FormulaAssignment_6)
	{ after(grammarAccess.getForAllAccess().getFormulaAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForAll__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAllAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getForAllAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exists__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__0__Impl
	rule__Exists__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getExistsAction_0()); }
	()
	{ after(grammarAccess.getExistsAccess().getExistsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__1__Impl
	rule__Exists__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getExistsKeyword_1()); }
	'exists('
	{ after(grammarAccess.getExistsAccess().getExistsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__2__Impl
	rule__Exists__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getBoundedAssignment_2()); }
	(rule__Exists__BoundedAssignment_2)
	{ after(grammarAccess.getExistsAccess().getBoundedAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__3__Impl
	rule__Exists__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getInKeyword_3()); }
	'in'
	{ after(grammarAccess.getExistsAccess().getInKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__4__Impl
	rule__Exists__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getIterationAssignment_4()); }
	(rule__Exists__IterationAssignment_4)
	{ after(grammarAccess.getExistsAccess().getIterationAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__5__Impl
	rule__Exists__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getExistsAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__6__Impl
	rule__Exists__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getFormulaAssignment_6()); }
	(rule__Exists__FormulaAssignment_6)
	{ after(grammarAccess.getExistsAccess().getFormulaAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exists__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistsAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getExistsAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getFormulaParserRuleCall_0_1()); }
	ruleFormula
	{ after(grammarAccess.getPrimaryAccess().getFormulaParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExpression__Group_0__0__Impl
	rule__TerminalExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpressionAccess().getIntConstantAction_0_0()); }
	()
	{ after(grammarAccess.getTerminalExpressionAccess().getIntConstantAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_0_1()); }
	(rule__TerminalExpression__ValueAssignment_0_1)
	{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExpression__Group_1__0__Impl
	rule__TerminalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpressionAccess().getStringConstantAction_1_0()); }
	()
	{ after(grammarAccess.getTerminalExpressionAccess().getStringConstantAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1_1()); }
	(rule__TerminalExpression__ValueAssignment_1_1)
	{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExpression__Group_2__0__Impl
	rule__TerminalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpressionAccess().getBoolConstantAction_2_0()); }
	()
	{ after(grammarAccess.getTerminalExpressionAccess().getBoolConstantAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_2_1()); }
	(rule__TerminalExpression__ValueAssignment_2_1)
	{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExpression__Group_3__0__Impl
	rule__TerminalExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpressionAccess().getVariableRefAction_3_0()); }
	()
	{ after(grammarAccess.getTerminalExpressionAccess().getVariableRefAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminalExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminalExpressionAccess().getVariableAssignment_3_1()); }
	(rule__TerminalExpression__VariableAssignment_3_1)
	{ after(grammarAccess.getTerminalExpressionAccess().getVariableAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConsistencyRule__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConsistencyRuleAccess().getTypeIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConsistencyRuleAccess().getTypeIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__VariableAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConsistencyRuleAccess().getVariableVariableParserRuleCall_2_0()); }
		ruleVariable
		{ after(grammarAccess.getConsistencyRuleAccess().getVariableVariableParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConsistencyRule__FormulaAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConsistencyRuleAccess().getFormulaFormulaParserRuleCall_4_0()); }
		ruleFormula
		{ after(grammarAccess.getConsistencyRuleAccess().getFormulaFormulaParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Get__FeatureAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGetAccess().getFeatureIDTerminalRuleCall_1_2_0()); }
		RULE_ID
		{ after(grammarAccess.getGetAccess().getFeatureIDTerminalRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getRightXorParserRuleCall_1_2_0()); }
		ruleXor
		{ after(grammarAccess.getIfAccess().getRightXorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Xor__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorAccess().getRightOrParserRuleCall_1_2_0()); }
		ruleOr
		{ after(grammarAccess.getXorAccess().getRightOrParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getAndAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Not__NotAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotAccess().getNotFormulaParserRuleCall_2_0()); }
		ruleFormula
		{ after(grammarAccess.getNotAccess().getNotFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__BoundedAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAllAccess().getBoundedVariableParserRuleCall_2_0()); }
		ruleVariable
		{ after(grammarAccess.getForAllAccess().getBoundedVariableParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__IterationAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAllAccess().getIterationTermParserRuleCall_4_0()); }
		ruleTerm
		{ after(grammarAccess.getForAllAccess().getIterationTermParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__FormulaAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAllAccess().getFormulaFormulaParserRuleCall_6_0()); }
		ruleFormula
		{ after(grammarAccess.getForAllAccess().getFormulaFormulaParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__BoundedAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistsAccess().getBoundedVariableParserRuleCall_2_0()); }
		ruleVariable
		{ after(grammarAccess.getExistsAccess().getBoundedVariableParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__IterationAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistsAccess().getIterationTermParserRuleCall_4_0()); }
		ruleTerm
		{ after(grammarAccess.getExistsAccess().getIterationTermParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exists__FormulaAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistsAccess().getFormulaFormulaParserRuleCall_6_0()); }
		ruleFormula
		{ after(grammarAccess.getExistsAccess().getFormulaFormulaParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getValueAlternatives_2_1_0()); }
		(rule__TerminalExpression__ValueAlternatives_2_1_0)
		{ after(grammarAccess.getTerminalExpressionAccess().getValueAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__VariableAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminalExpressionAccess().getVariableVariableCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getTerminalExpressionAccess().getVariableVariableIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTerminalExpressionAccess().getVariableVariableIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getTerminalExpressionAccess().getVariableVariableCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
