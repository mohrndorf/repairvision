14.3.18 Message (from BasicInteractions)

Description

A Message defines a particular communication between Lifelines of an Interaction.
506 UML Superstructure Specification, v2.4.1
A Message is a NamedElement that defines one specific kind of communication in an Interaction. A communication can
be, for example, raising a signal, invoking an Operation, creating or destroying an Instance. The Message specifies not
only the kind of communication given by the dispatching ExecutionSpecification, but also the sender and the receiver.
A Message associates normally two OccurrenceSpecifications - one sending OccurrenceSpecification and one receiving
OccurrenceSpecification.

Constraints
[1] If the sendEvent and the receiveEvent of the same Message are on the same Lifeline, the sendEvent must be ordered
before the receiveEvent.

[2] The signature must either refer to an Operation (in which case messageSort is either synchCall or asynchCall) or a Signal
(in which case messageSort is asynchSignal). The name of the NamedElement referenced by signature must be the same
as that of the Message.

[3] In the case when the Message signature is an Operation, the arguments of the Message must correspond to the parameters
of the Operation. A Parameter corresponds to an Argument if the Argument is of the same Class or a specialization of that
of the Parameter.

[4] In the case when the Message signature is a Signal, the arguments of the Message must correspond to the attributes of the
Signal. A Message Argument corresponds to a Signal Attribute if the Argument is of the same Class or a specialization of
that of the Attribute.

[5] Arguments of a Message must only be:
i) attributes of the sending lifeline.
ii) constants.
iii) symbolic values (which are wildcard values representing any legal value).
iv) explicit parameters of the enclosing Interaction.
v) attributes of the class owning the Interaction.
UML Superstructure Specification, v2.4.1 507

[6] Messages cannot cross boundaries of CombinedFragments or their operands.

[7] If the MessageEnds are both OccurrenceSpecifications, then the connector must go between the Parts represented by the
Lifelines of the two MessageEnds.

[8] Where messageSort = createMessage, no other OccurrenceSpecification on a given Lifeline in an InteractionOperand may
appear above an OccurrenceSpecification that is the receiveEvent of this creation Message.

Semantics

The semantics of a complete Message is simply the trace <sendEvent, receiveEvent>.
A lost message is a message where the sending event occurrence is known, but there is no receiving event occurrence. We
interpret this to be because the message never reached its destination. The semantics is simply the trace <sendEvent>.
A found message is a message where the receiving event occurrence is known, but there is no (known) sending event
occurrence. We interpret this to be because the origin of the message is outside the scope of the description. This may for
example be noise or other activity that we do not want to describe in detail. The semantics is simply the trace
<receiveEvent>.

A Message reflects either an Operation call and start of execution or a sending and reception of a Signal.When a Message
represents an Operation, the arguments of the Message are the arguments of the Operation.
When a Message represents a Signal, the arguments of the Message are the attributes of the Signal.