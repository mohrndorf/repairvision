/*
 * generated by Xtext 2.12.0
 */
grammar InternalFirstOrderLogic;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.sidiff.validation.laguage.fol.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.sidiff.validation.laguage.fol.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.sidiff.validation.laguage.fol.services.FirstOrderLogicGrammarAccess;

}

@parser::members {

 	private FirstOrderLogicGrammarAccess grammarAccess;

    public InternalFirstOrderLogicParser(TokenStream input, FirstOrderLogicGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ConstraintLibrary";
   	}

   	@Override
   	protected FirstOrderLogicGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleConstraintLibrary
entryRuleConstraintLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintLibraryRule()); }
	iv_ruleConstraintLibrary=ruleConstraintLibrary
	{ $current=$iv_ruleConstraintLibrary.current; }
	EOF;

// Rule ConstraintLibrary
ruleConstraintLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='domain'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintLibraryAccess().getDomainKeyword_0());
		}
		(
			(
				lv_domain_1_0=RULE_STRING
				{
					newLeafNode(lv_domain_1_0, grammarAccess.getConstraintLibraryAccess().getDomainSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintLibraryRule());
					}
					setWithLastConsumed(
						$current,
						"domain",
						lv_domain_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='import'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstraintLibraryAccess().getImportKeyword_2());
		}
		(
			(
				lv_packageImport_3_0=RULE_STRING
				{
					newLeafNode(lv_packageImport_3_0, grammarAccess.getConstraintLibraryAccess().getPackageImportSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintLibraryRule());
					}
					setWithLastConsumed(
						$current,
						"packageImport",
						lv_packageImport_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintLibraryAccess().getConstraintsConstraintParserRuleCall_4_0());
				}
				lv_constraints_4_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintLibraryRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_4_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraint'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintAccess().getConstraintKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='message'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstraintAccess().getMessageKeyword_2());
		}
		(
			(
				lv_message_3_0=RULE_STRING
				{
					newLeafNode(lv_message_3_0, grammarAccess.getConstraintAccess().getMessageSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"message",
						lv_message_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='context'
		{
			newLeafNode(otherlv_4, grammarAccess.getConstraintAccess().getContextKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getVariableVariableParserRuleCall_5_0());
				}
				lv_variable_5_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"variable",
						lv_variable_5_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getConstraintAccess().getColonKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getFormulaFormulaParserRuleCall_7_0());
				}
				lv_formula_7_0=ruleFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"formula",
						lv_formula_7_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getTypeEClassifierCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleFormula
entryRuleFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	iv_ruleFormula=ruleFormula
	{ $current=$iv_ruleFormula.current; }
	EOF;

// Rule Formula
ruleFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFormulaAccess().getBinaryFormulaParserRuleCall());
	}
	this_BinaryFormula_0=ruleBinaryFormula
	{
		$current = $this_BinaryFormula_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleBinaryFormula
entryRuleBinaryFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryFormulaRule()); }
	iv_ruleBinaryFormula=ruleBinaryFormula
	{ $current=$iv_ruleBinaryFormula.current; }
	EOF;

// Rule BinaryFormula
ruleBinaryFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBinaryFormulaAccess().getIffParserRuleCall());
	}
	this_Iff_0=ruleIff
	{
		$current = $this_Iff_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleIff
entryRuleIff returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIffRule()); }
	iv_ruleIff=ruleIff
	{ $current=$iv_ruleIff.current; }
	EOF;

// Rule Iff
ruleIff returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIffAccess().getIfParserRuleCall_0());
		}
		this_If_0=ruleIf
		{
			$current = $this_If_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getIffAccess().getIffLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getIffAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIffAccess().getRightIfParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleIf
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIffRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.sidiff.validation.laguage.fol.FirstOrderLogic.If");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIfAccess().getXorParserRuleCall_0());
		}
		this_Xor_0=ruleXor
		{
			$current = $this_Xor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getIfAccess().getIfLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='implies'
			{
				newLeafNode(otherlv_2, grammarAccess.getIfAccess().getImpliesKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfAccess().getRightXorParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.sidiff.validation.laguage.fol.FirstOrderLogic.Xor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXor
entryRuleXor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorRule()); }
	iv_ruleXor=ruleXor
	{ $current=$iv_ruleXor.current; }
	EOF;

// Rule Xor
ruleXor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXorAccess().getXorLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='xor'
			{
				newLeafNode(otherlv_2, grammarAccess.getXorAccess().getXorKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXorAccess().getRightOrParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.sidiff.validation.laguage.fol.FirstOrderLogic.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='or'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getOrKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.sidiff.validation.laguage.fol.FirstOrderLogic.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getBooleanExpressionParserRuleCall_0());
		}
		this_BooleanExpression_0=ruleBooleanExpression
		{
			$current = $this_BooleanExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='and'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAndKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightBooleanExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBooleanExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.sidiff.validation.laguage.fol.FirstOrderLogic.BooleanExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryFormula
entryRuleUnaryFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryFormulaRule()); }
	iv_ruleUnaryFormula=ruleUnaryFormula
	{ $current=$iv_ruleUnaryFormula.current; }
	EOF;

// Rule UnaryFormula
ruleUnaryFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getUnaryFormulaAccess().getNotParserRuleCall());
	}
	this_Not_0=ruleNot
	{
		$current = $this_Not_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current; }
	EOF;

// Rule Not
ruleNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNotAccess().getNotAction_0(),
					$current);
			}
		)
		otherlv_1='not('
		{
			newLeafNode(otherlv_1, grammarAccess.getNotAccess().getNotKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotAccess().getNotFormulaParserRuleCall_2_0());
				}
				lv_not_2_0=ruleFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotRule());
					}
					set(
						$current,
						"not",
						lv_not_2_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNotAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	iv_rulePredicate=rulePredicate
	{ $current=$iv_rulePredicate.current; }
	EOF;

// Rule Predicate
rulePredicate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPredicateAccess().getEqualsParserRuleCall_0());
		}
		this_Equals_0=ruleEquals
		{
			$current = $this_Equals_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPredicateAccess().getInequalityParserRuleCall_1());
		}
		this_Inequality_1=ruleInequality
		{
			$current = $this_Inequality_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPredicateAccess().getIsEmptyParserRuleCall_2());
		}
		this_IsEmpty_2=ruleIsEmpty
		{
			$current = $this_IsEmpty_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPredicateAccess().getIsInstanceOfParserRuleCall_3());
		}
		this_IsInstanceOf_3=ruleIsInstanceOf
		{
			$current = $this_IsInstanceOf_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPredicateAccess().getIsValueLiteralOfParserRuleCall_4());
		}
		this_IsValueLiteralOf_4=ruleIsValueLiteralOf
		{
			$current = $this_IsValueLiteralOf_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEquals
entryRuleEquals returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualsRule()); }
	iv_ruleEquals=ruleEquals
	{ $current=$iv_ruleEquals.current; }
	EOF;

// Rule Equals
ruleEquals returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='isEqual('
		{
			newLeafNode(otherlv_0, grammarAccess.getEqualsAccess().getIsEqualKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualsAccess().getLeftTermParserRuleCall_1_0());
				}
				lv_left_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualsRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getEqualsAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualsAccess().getRightTermParserRuleCall_3_0());
				}
				lv_right_3_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualsRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getEqualsAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleInequality
entryRuleInequality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInequalityRule()); }
	iv_ruleInequality=ruleInequality
	{ $current=$iv_ruleInequality.current; }
	EOF;

// Rule Inequality
ruleInequality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInequalityAccess().getGreaterParserRuleCall_0());
		}
		this_Greater_0=ruleGreater
		{
			$current = $this_Greater_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInequalityAccess().getGreaterEqualParserRuleCall_1());
		}
		this_GreaterEqual_1=ruleGreaterEqual
		{
			$current = $this_GreaterEqual_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInequalityAccess().getSmallerParserRuleCall_2());
		}
		this_Smaller_2=ruleSmaller
		{
			$current = $this_Smaller_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInequalityAccess().getSmallerEqualParserRuleCall_3());
		}
		this_SmallerEqual_3=ruleSmallerEqual
		{
			$current = $this_SmallerEqual_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGreater
entryRuleGreater returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreaterRule()); }
	iv_ruleGreater=ruleGreater
	{ $current=$iv_ruleGreater.current; }
	EOF;

// Rule Greater
ruleGreater returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='isGreater('
		{
			newLeafNode(otherlv_0, grammarAccess.getGreaterAccess().getIsGreaterKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterAccess().getLeftTermParserRuleCall_1_0());
				}
				lv_left_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getGreaterAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterAccess().getRightTermParserRuleCall_3_0());
				}
				lv_right_3_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getGreaterAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleGreaterEqual
entryRuleGreaterEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreaterEqualRule()); }
	iv_ruleGreaterEqual=ruleGreaterEqual
	{ $current=$iv_ruleGreaterEqual.current; }
	EOF;

// Rule GreaterEqual
ruleGreaterEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='isGreaterEqual('
		{
			newLeafNode(otherlv_0, grammarAccess.getGreaterEqualAccess().getIsGreaterEqualKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterEqualAccess().getLeftTermParserRuleCall_1_0());
				}
				lv_left_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getGreaterEqualAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGreaterEqualAccess().getRightTermParserRuleCall_3_0());
				}
				lv_right_3_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGreaterEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getGreaterEqualAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleSmaller
entryRuleSmaller returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSmallerRule()); }
	iv_ruleSmaller=ruleSmaller
	{ $current=$iv_ruleSmaller.current; }
	EOF;

// Rule Smaller
ruleSmaller returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='isSmaller('
		{
			newLeafNode(otherlv_0, grammarAccess.getSmallerAccess().getIsSmallerKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmallerAccess().getLeftTermParserRuleCall_1_0());
				}
				lv_left_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmallerRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getSmallerAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmallerAccess().getRightTermParserRuleCall_3_0());
				}
				lv_right_3_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmallerRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSmallerAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleSmallerEqual
entryRuleSmallerEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSmallerEqualRule()); }
	iv_ruleSmallerEqual=ruleSmallerEqual
	{ $current=$iv_ruleSmallerEqual.current; }
	EOF;

// Rule SmallerEqual
ruleSmallerEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='isSmallerEqual('
		{
			newLeafNode(otherlv_0, grammarAccess.getSmallerEqualAccess().getIsSmallerEqualKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmallerEqualAccess().getLeftTermParserRuleCall_1_0());
				}
				lv_left_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmallerEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getSmallerEqualAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmallerEqualAccess().getRightTermParserRuleCall_3_0());
				}
				lv_right_3_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmallerEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSmallerEqualAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleIsEmpty
entryRuleIsEmpty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsEmptyRule()); }
	iv_ruleIsEmpty=ruleIsEmpty
	{ $current=$iv_ruleIsEmpty.current; }
	EOF;

// Rule IsEmpty
ruleIsEmpty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='isEmpty('
		{
			newLeafNode(otherlv_0, grammarAccess.getIsEmptyAccess().getIsEmptyKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsEmptyAccess().getTermTermParserRuleCall_1_0());
				}
				lv_term_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsEmptyRule());
					}
					set(
						$current,
						"term",
						lv_term_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getIsEmptyAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleIsInstanceOf
entryRuleIsInstanceOf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsInstanceOfRule()); }
	iv_ruleIsInstanceOf=ruleIsInstanceOf
	{ $current=$iv_ruleIsInstanceOf.current; }
	EOF;

// Rule IsInstanceOf
ruleIsInstanceOf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='isInstanceOf('
		{
			newLeafNode(otherlv_0, grammarAccess.getIsInstanceOfAccess().getIsInstanceOfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsInstanceOfAccess().getTermTermParserRuleCall_1_0());
				}
				lv_term_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsInstanceOfRule());
					}
					set(
						$current,
						"term",
						lv_term_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getIsInstanceOfAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsInstanceOfAccess().getTypeClassifierParserRuleCall_3_0());
				}
				lv_type_3_0=ruleClassifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsInstanceOfRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Classifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIsInstanceOfAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleIsValueLiteralOf
entryRuleIsValueLiteralOf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsValueLiteralOfRule()); }
	iv_ruleIsValueLiteralOf=ruleIsValueLiteralOf
	{ $current=$iv_ruleIsValueLiteralOf.current; }
	EOF;

// Rule IsValueLiteralOf
ruleIsValueLiteralOf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='isValueLiteralOf('
		{
			newLeafNode(otherlv_0, grammarAccess.getIsValueLiteralOfAccess().getIsValueLiteralOfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsValueLiteralOfAccess().getTermTermParserRuleCall_1_0());
				}
				lv_term_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsValueLiteralOfRule());
					}
					set(
						$current,
						"term",
						lv_term_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getIsValueLiteralOfAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsValueLiteralOfAccess().getTypeDataTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsValueLiteralOfRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIsValueLiteralOfAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleClassifier
entryRuleClassifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassifierRule()); }
	iv_ruleClassifier=ruleClassifier
	{ $current=$iv_ruleClassifier.current; }
	EOF;

// Rule Classifier
ruleClassifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getClassifierAccess().getClassifierConstantParserRuleCall_0());
		}
		this_ClassifierConstant_0=ruleClassifierConstant
		{
			$current = $this_ClassifierConstant_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClassifierAccess().getAsClassifierParserRuleCall_1());
		}
		this_AsClassifier_1=ruleAsClassifier
		{
			$current = $this_AsClassifier_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleClassifierConstant
entryRuleClassifierConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassifierConstantRule()); }
	iv_ruleClassifierConstant=ruleClassifierConstant
	{ $current=$iv_ruleClassifierConstant.current; }
	EOF;

// Rule ClassifierConstant
ruleClassifierConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getClassifierConstantRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getClassifierConstantAccess().getConstantEClassifierCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleAsClassifier
entryRuleAsClassifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAsClassifierRule()); }
	iv_ruleAsClassifier=ruleAsClassifier
	{ $current=$iv_ruleAsClassifier.current; }
	EOF;

// Rule AsClassifier
ruleAsClassifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='asClassifier('
		{
			newLeafNode(otherlv_0, grammarAccess.getAsClassifierAccess().getAsClassifierKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAsClassifierAccess().getTermTermParserRuleCall_1_0());
				}
				lv_term_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAsClassifierRule());
					}
					set(
						$current,
						"term",
						lv_term_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getAsClassifierAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataTypeAccess().getDataTypeConstantParserRuleCall_0());
		}
		this_DataTypeConstant_0=ruleDataTypeConstant
		{
			$current = $this_DataTypeConstant_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataTypeAccess().getAsDataTypeParserRuleCall_1());
		}
		this_AsDataType_1=ruleAsDataType
		{
			$current = $this_AsDataType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDataTypeConstant
entryRuleDataTypeConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeConstantRule()); }
	iv_ruleDataTypeConstant=ruleDataTypeConstant
	{ $current=$iv_ruleDataTypeConstant.current; }
	EOF;

// Rule DataTypeConstant
ruleDataTypeConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDataTypeConstantRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getDataTypeConstantAccess().getConstantEDataTypeCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleAsDataType
entryRuleAsDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAsDataTypeRule()); }
	iv_ruleAsDataType=ruleAsDataType
	{ $current=$iv_ruleAsDataType.current; }
	EOF;

// Rule AsDataType
ruleAsDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='asDataType('
		{
			newLeafNode(otherlv_0, grammarAccess.getAsDataTypeAccess().getAsDataTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAsDataTypeAccess().getTermTermParserRuleCall_1_0());
				}
				lv_term_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAsDataTypeRule());
					}
					set(
						$current,
						"term",
						lv_term_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getAsDataTypeAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleQuantifier
entryRuleQuantifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantifierRule()); }
	iv_ruleQuantifier=ruleQuantifier
	{ $current=$iv_ruleQuantifier.current; }
	EOF;

// Rule Quantifier
ruleQuantifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQuantifierAccess().getForAllParserRuleCall_0());
		}
		this_ForAll_0=ruleForAll
		{
			$current = $this_ForAll_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQuantifierAccess().getExistsParserRuleCall_1());
		}
		this_Exists_1=ruleExists
		{
			$current = $this_Exists_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleForAll
entryRuleForAll returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForAllRule()); }
	iv_ruleForAll=ruleForAll
	{ $current=$iv_ruleForAll.current; }
	EOF;

// Rule ForAll
ruleForAll returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForAllAccess().getForAllAction_0(),
					$current);
			}
		)
		otherlv_1='forAll('
		{
			newLeafNode(otherlv_1, grammarAccess.getForAllAccess().getForAllKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAllAccess().getNameVariableParserRuleCall_2_0());
				}
				lv_name_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForAllRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='in'
		{
			newLeafNode(otherlv_3, grammarAccess.getForAllAccess().getInKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAllAccess().getIterationTermParserRuleCall_4_0());
				}
				lv_iteration_4_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForAllRule());
					}
					set(
						$current,
						"iteration",
						lv_iteration_4_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getForAllAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAllAccess().getFormulaFormulaParserRuleCall_6_0());
				}
				lv_formula_6_0=ruleFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForAllRule());
					}
					set(
						$current,
						"formula",
						lv_formula_6_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getForAllAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleExists
entryRuleExists returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExistsRule()); }
	iv_ruleExists=ruleExists
	{ $current=$iv_ruleExists.current; }
	EOF;

// Rule Exists
ruleExists returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExistsAccess().getExistsAction_0(),
					$current);
			}
		)
		otherlv_1='exists('
		{
			newLeafNode(otherlv_1, grammarAccess.getExistsAccess().getExistsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistsAccess().getNameVariableParserRuleCall_2_0());
				}
				lv_name_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistsRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='in'
		{
			newLeafNode(otherlv_3, grammarAccess.getExistsAccess().getInKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistsAccess().getIterationTermParserRuleCall_4_0());
				}
				lv_iteration_4_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistsRule());
					}
					set(
						$current,
						"iteration",
						lv_iteration_4_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getExistsAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistsAccess().getFormulaFormulaParserRuleCall_6_0());
				}
				lv_formula_6_0=ruleFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistsRule());
					}
					set(
						$current,
						"formula",
						lv_formula_6_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getExistsAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getBooleanExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getBooleanExpressionAccess().getFormulaParserRuleCall_0_1());
			}
			this_Formula_1=ruleFormula
			{
				$current = $this_Formula_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getBooleanExpressionAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getUnaryFormulaParserRuleCall_1());
		}
		this_UnaryFormula_3=ruleUnaryFormula
		{
			$current = $this_UnaryFormula_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getQuantifierParserRuleCall_2());
		}
		this_Quantifier_4=ruleQuantifier
		{
			$current = $this_Quantifier_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getPredicateParserRuleCall_3());
		}
		this_Predicate_5=rulePredicate
		{
			$current = $this_Predicate_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getBoolConstantParserRuleCall_4());
		}
		this_BoolConstant_6=ruleBoolConstant
		{
			$current = $this_BoolConstant_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBoolConstant
entryRuleBoolConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoolConstantRule()); }
	iv_ruleBoolConstant=ruleBoolConstant
	{ $current=$iv_ruleBoolConstant.current; }
	EOF;

// Rule BoolConstant
ruleBoolConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoolConstantAccess().getBoolConstantAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_value_1_1='true'
					{
						newLeafNode(lv_value_1_1, grammarAccess.getBoolConstantAccess().getValueTrueKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBoolConstantRule());
						}
						setWithLastConsumed($current, "value", lv_value_1_1, null);
					}
					    |
					lv_value_1_2='false'
					{
						newLeafNode(lv_value_1_2, grammarAccess.getBoolConstantAccess().getValueFalseKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBoolConstantRule());
						}
						setWithLastConsumed($current, "value", lv_value_1_2, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermAccess().getConstantParserRuleCall_0());
		}
		this_Constant_0=ruleConstant
		{
			$current = $this_Constant_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getVariableRefParserRuleCall_1());
		}
		this_VariableRef_1=ruleVariableRef
		{
			$current = $this_VariableRef_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getGetContainmentsParserRuleCall_2());
		}
		this_GetContainments_2=ruleGetContainments
		{
			$current = $this_GetContainments_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getGetContainerParserRuleCall_3());
		}
		this_GetContainer_3=ruleGetContainer
		{
			$current = $this_GetContainer_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getGetClosureParserRuleCall_4());
		}
		this_GetClosure_4=ruleGetClosure
		{
			$current = $this_GetClosure_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getSizeParserRuleCall_5());
		}
		this_Size_5=ruleSize
		{
			$current = $this_Size_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getIndexOfParserRuleCall_6());
		}
		this_IndexOf_6=ruleIndexOf
		{
			$current = $this_IndexOf_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getConcatenateParserRuleCall_7());
		}
		this_Concatenate_7=ruleConcatenate
		{
			$current = $this_Concatenate_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getCapitalizeParserRuleCall_8());
		}
		this_Capitalize_8=ruleCapitalize
		{
			$current = $this_Capitalize_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRefRule()); }
	iv_ruleVariableRef=ruleVariableRef
	{ $current=$iv_ruleVariableRef.current; }
	EOF;

// Rule VariableRef
ruleVariableRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableRefAccess().getVariableRefAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRefRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableRefAccess().getNameVariableCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableRefAccess().getGetGetParserRuleCall_2_0());
				}
				lv_get_2_0=ruleGet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRefRule());
					}
					set(
						$current,
						"get",
						lv_get_2_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Get");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleGet
entryRuleGet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGetRule()); }
	iv_ruleGet=ruleGet
	{ $current=$iv_ruleGet.current; }
	EOF;

// Rule Get
ruleGet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getGetAccess().getFullStopKeyword_0());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGetRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getGetAccess().getTypeEClassifierCrossReference_1_0_0());
					}
				)
			)
			otherlv_2='::'
			{
				newLeafNode(otherlv_2, grammarAccess.getGetAccess().getColonColonKeyword_1_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGetRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getGetAccess().getNameEStructuralFeatureCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGetAccess().getNextGetParserRuleCall_3_0());
				}
				lv_next_4_0=ruleGet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGetRule());
					}
					set(
						$current,
						"next",
						lv_next_4_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Get");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleGetContainer
entryRuleGetContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGetContainerRule()); }
	iv_ruleGetContainer=ruleGetContainer
	{ $current=$iv_ruleGetContainer.current; }
	EOF;

// Rule GetContainer
ruleGetContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='getContainer('
		{
			newLeafNode(otherlv_0, grammarAccess.getGetContainerAccess().getGetContainerKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGetContainerAccess().getElementTermParserRuleCall_1_0());
				}
				lv_element_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGetContainerRule());
					}
					set(
						$current,
						"element",
						lv_element_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getGetContainerAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleGetContainments
entryRuleGetContainments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGetContainmentsRule()); }
	iv_ruleGetContainments=ruleGetContainments
	{ $current=$iv_ruleGetContainments.current; }
	EOF;

// Rule GetContainments
ruleGetContainments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='getContainments('
		{
			newLeafNode(otherlv_0, grammarAccess.getGetContainmentsAccess().getGetContainmentsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGetContainmentsAccess().getElementTermParserRuleCall_1_0());
				}
				lv_element_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGetContainmentsRule());
					}
					set(
						$current,
						"element",
						lv_element_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getGetContainmentsAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleGetClosure
entryRuleGetClosure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGetClosureRule()); }
	iv_ruleGetClosure=ruleGetClosure
	{ $current=$iv_ruleGetClosure.current; }
	EOF;

// Rule GetClosure
ruleGetClosure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='getClosure('
		{
			newLeafNode(otherlv_0, grammarAccess.getGetClosureAccess().getGetClosureKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGetClosureAccess().getElementTermParserRuleCall_1_0());
				}
				lv_element_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGetClosureRule());
					}
					set(
						$current,
						"element",
						lv_element_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getGetClosureAccess().getCommaKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGetClosureRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getGetClosureAccess().getFeatureEStructuralFeatureCrossReference_3_0());
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getGetClosureAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleSize
entryRuleSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSizeRule()); }
	iv_ruleSize=ruleSize
	{ $current=$iv_ruleSize.current; }
	EOF;

// Rule Size
ruleSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='size('
		{
			newLeafNode(otherlv_0, grammarAccess.getSizeAccess().getSizeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSizeAccess().getElementsTermParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSizeRule());
					}
					set(
						$current,
						"elements",
						lv_elements_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getSizeAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleIndexOf
entryRuleIndexOf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexOfRule()); }
	iv_ruleIndexOf=ruleIndexOf
	{ $current=$iv_ruleIndexOf.current; }
	EOF;

// Rule IndexOf
ruleIndexOf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='indexOf('
		{
			newLeafNode(otherlv_0, grammarAccess.getIndexOfAccess().getIndexOfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexOfAccess().getContainerTermParserRuleCall_1_0());
				}
				lv_container_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexOfRule());
					}
					set(
						$current,
						"container",
						lv_container_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getIndexOfAccess().getCommaKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIndexOfRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getIndexOfAccess().getFeatureEStructuralFeatureCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getIndexOfAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexOfAccess().getElementTermParserRuleCall_5_0());
				}
				lv_element_5_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexOfRule());
					}
					set(
						$current,
						"element",
						lv_element_5_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getIndexOfAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleConcatenate
entryRuleConcatenate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcatenateRule()); }
	iv_ruleConcatenate=ruleConcatenate
	{ $current=$iv_ruleConcatenate.current; }
	EOF;

// Rule Concatenate
ruleConcatenate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='concatenate('
		{
			newLeafNode(otherlv_0, grammarAccess.getConcatenateAccess().getConcatenateKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConcatenateAccess().getLeftTermParserRuleCall_1_0());
				}
				lv_left_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConcatenateRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getConcatenateAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConcatenateAccess().getRightTermParserRuleCall_3_0());
				}
				lv_right_3_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConcatenateRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getConcatenateAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleCapitalize
entryRuleCapitalize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCapitalizeRule()); }
	iv_ruleCapitalize=ruleCapitalize
	{ $current=$iv_ruleCapitalize.current; }
	EOF;

// Rule Capitalize
ruleCapitalize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='capitalize('
		{
			newLeafNode(otherlv_0, grammarAccess.getCapitalizeAccess().getCapitalizeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCapitalizeAccess().getStringTermParserRuleCall_1_0());
				}
				lv_string_1_0=ruleTerm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCapitalizeRule());
					}
					set(
						$current,
						"string",
						lv_string_1_0,
						"org.sidiff.validation.laguage.fol.FirstOrderLogic.Term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getCapitalizeAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantAccess().getIntConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_INT
					{
						newLeafNode(lv_value_1_0, grammarAccess.getConstantAccess().getValueINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantAccess().getStringConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getConstantAccess().getValueSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getBoolConstantParserRuleCall_2());
		}
		this_BoolConstant_4=ruleBoolConstant
		{
			$current = $this_BoolConstant_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
