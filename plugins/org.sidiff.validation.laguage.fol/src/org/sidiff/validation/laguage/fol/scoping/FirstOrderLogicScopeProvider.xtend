/*
 * generated by Xtext 2.10.0
 */
package org.sidiff.validation.laguage.fol.scoping

import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.sidiff.validation.laguage.fol.firstOrderLogic.FirstOrderLogicPackage
import org.sidiff.validation.laguage.fol.firstOrderLogic.VariableRef
import org.sidiff.validation.laguage.fol.util.ScopeUtil
import org.sidiff.validation.laguage.fol.util.EMFMetaAccessUtil
import java.util.Map
import org.eclipse.emf.ecore.EPackage

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class FirstOrderLogicScopeProvider extends AbstractFirstOrderLogicScopeProvider {
	
	Map<String, EPackage> workspaceEPackages
	
	def getWorkspaceEPackages() {
		if (workspaceEPackages === null) {
			workspaceEPackages = EMFMetaAccessUtil.workspaceEPackages
		}
		return workspaceEPackages
	}
	
	override getScope(EObject context, EReference reference) {

		// VariableRef
		if (reference == FirstOrderLogicPackage.eINSTANCE.variableRef_Name) {
			return Scopes::scopeFor(ScopeUtil.getVariables(context as VariableRef))
		}

		// Variable
		if (reference == FirstOrderLogicPackage.eINSTANCE.variable_Type) {
			return Scopes::scopeFor(ScopeUtil.getAllTypes(context, getWorkspaceEPackages()).filter[it instanceof EClass])
		} 
		
		// ClassifierConstant:
		if (reference == FirstOrderLogicPackage.eINSTANCE.classifierConstant_Constant) {
			return Scopes::scopeFor(ScopeUtil.getAllTypes(context, getWorkspaceEPackages()))
		} 
		
		// DataTypeConstant:
		if (reference == FirstOrderLogicPackage.eINSTANCE.dataTypeConstant_Constant) {
			return Scopes::scopeFor(ScopeUtil.getAllDataTypes(context, getWorkspaceEPackages()))
		} 
		
		// FeatureConstant
		if (reference == FirstOrderLogicPackage.eINSTANCE.featureConstant_Constant) {
			return Scopes::scopeFor(ScopeUtil.getAllFeatures(context))
		}
		
		// Get:
		if (reference == FirstOrderLogicPackage.eINSTANCE.get_Name) {
			return Scopes::scopeFor(ScopeUtil.getAllFeatures(context))
		} else if (reference == FirstOrderLogicPackage.eINSTANCE.get_Type) {
			return Scopes::scopeFor(ScopeUtil.getAllSubTypes(context, getWorkspaceEPackages()));
		} 
		
		super.getScope(context, reference)
	}
}
