/*
 * generated by Xtext 2.10.0
 */
package org.sidiff.validation.laguage.fol.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.sidiff.validation.laguage.fol.firstOrderLogic.FirstOrderLogicPackage
import org.sidiff.validation.laguage.fol.util.ScopeUtil
import org.eclipse.emf.ecore.EClass

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class FirstOrderLogicScopeProvider extends AbstractFirstOrderLogicScopeProvider {

	override getScope(EObject context, EReference reference) {

		// Variable
		if (reference == FirstOrderLogicPackage.eINSTANCE.variable_Type) {
			return Scopes::scopeFor(ScopeUtil.getAllTypes(context)
				.filter[it instanceof EClass]
			)
		} 
		
		// IsInstanceOf:
		else if (reference == FirstOrderLogicPackage.eINSTANCE.isInstanceOf_Type) {
			return Scopes::scopeFor(ScopeUtil.getAllTypes(context))
		} 
		
		// Get:
		else if (reference == FirstOrderLogicPackage.eINSTANCE.get_Name) {
			return Scopes::scopeFor(ScopeUtil.getAllFeatures(context))
		} else if (reference == FirstOrderLogicPackage.eINSTANCE.get_Type) {
			return Scopes::scopeFor(ScopeUtil.getAllSubTypes(context));
		} 
		
		// GetClosure:
		else if (reference == FirstOrderLogicPackage.eINSTANCE.getClosure_Feature) {
			return Scopes::scopeFor(ScopeUtil.getAllFeatures(context))
		}
		
		super.getScope(context, reference)
	}
}
