grammar org.sidiff.validation.laguage.fol.FirstOrderLogic with org.eclipse.xtext.common.Terminals

generate firstOrderLogic "http://www.sidiff.org/validation/laguage/fol/FirstOrderLogic"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// NOTES: 
// - escape keywords with ^keyword
// - http://www.lorenzobettini.it/2014/02/switching-from-an-inferred-ecore-model-to-an-imported-one-in-your-xtext-grammar/

ConstraintLibrary:
	"domain" domain=STRING 'import' packageImport=STRING 
	constraints+=Constraint*;

Constraint:
	'constraint' name=ID 'message' message=STRING 'context' variable=Variable ':' formula=Formula;

Variable:
	type=[ecore::EClassifier] name=ID;

// formula:

/* 
 * Precedence: not, and, or, xor, if/implies, iff
 * 
 * To define the precedence we must write the rule for the operator with less precedence in 
 * terms of the rule for the operator with higher precedence. This means that in the grammar, 
 * the rules for operators with less precedence are defined first.
 */
 
// binary formulas:

Formula:
	BinaryFormula;
	
BinaryFormula returns Formula:
	Iff;
	
Iff returns Formula:
	If ({Iff.left=current} "=" right=If)*;

If returns Formula:
	Xor ({If.left=current} "implies" right=Xor)*;

Xor returns Formula:
	Or ({Xor.left=current} "xor" right=Or)*;

Or returns Formula:
	And ({Or.left=current} "or" right=And)*;

And returns Formula:
	BooleanExpression ({And.left=current} "and" right=BooleanExpression)*;

// unary formulas:

UnaryFormula returns Formula :
	Not;

Not returns UnaryFormula:
	{Not} "not(" not=Formula ")";
	
// predicates (term -> boolean):

Predicate returns Formula:
	Equals | Inequality | IsEmpty | IsInstanceOf | IsValueLiteralOf;

Equals:
	"isEqual(" (left=Term) "," (right=Term) ")";

Inequality returns Formula:
	Greater | GreaterEqual | Smaller | SmallerEqual;

Greater:
	"isGreater(" (left=Term) "," (right=Term) ")";
	
GreaterEqual:
	"isGreaterEqual(" (left=Term) "," (right=Term) ")";
	
Smaller:
	"isSmaller(" (left=Term) "," (right=Term) ")";
	
SmallerEqual:
	"isSmallerEqual(" (left=Term) "," (right=Term) ")";	
	
IsEmpty:
	"isEmpty(" term=Term ")";
	
IsInstanceOf:
	"isInstanceOf(" term=Term "," type=Classifier ")";
	
IsValueLiteralOf:
	"isValueLiteralOf(" term=Term "," type=DataType ")";
	
// terms as types:
Classifier:
	ClassifierConstant | AsClassifier;

ClassifierConstant:
	constant=[ecore::EClassifier];
	
AsClassifier:
	"asClassifier(" term=Term ")";

DataType: 
	DataTypeConstant | AsDataType;

DataTypeConstant:
	constant=[ecore::EDataType];

AsDataType:
	"asDataType(" term=Term ")";
	
// quantifier

Quantifier returns Formula:
	ForAll | Exists;

ForAll returns Quantifier:
	{ForAll} "forAll(" name=Variable "in" iteration=Term ":" formula=Formula ")";
	
Exists returns Quantifier:
	{Exists} "exists(" name=Variable "in" iteration=Term ":" formula=Formula ")";

// boolean:

BooleanExpression returns Formula:
	'(' Formula ')' | UnaryFormula | Quantifier | Predicate | BoolConstant;
	
BoolConstant returns Term:
	{BoolConstant} value=('true' | 'false');

// terms:

Term:
	Constant | VariableRef | GetContainments | GetContainer | GetClosure | Size | IndexOf | Concatenate | Capitalize;
	
VariableRef returns Term:
	{VariableRef} name=[Variable] (get=Get)?;

// function terms (term -> term):

Get:
	"." (type=[ecore::EClassifier] "::" )? name=[ecore::EStructuralFeature] (next=Get)?;
	
GetContainer:
	"getContainer(" element=Term ")";
	
GetContainments:
	"getContainments(" element=Term ")";
	
GetClosure:
	"getClosure(" element=Term "," feature=[ecore::EStructuralFeature] ")";
	
Size: 
	"size(" elements=Term ")";
	
IndexOf:
	"indexOf(" container=Term "," feature=[ecore::EStructuralFeature] "," element=Term ")";
	
Concatenate :
	"concatenate(" left=Term "," right=Term ")";
	
Capitalize :
	"capitalize(" string=Term ")";

// primitive terms:

Constant returns Term:
	{IntConstant} value=INT |
	{StringConstant} value=STRING |
	BoolConstant;