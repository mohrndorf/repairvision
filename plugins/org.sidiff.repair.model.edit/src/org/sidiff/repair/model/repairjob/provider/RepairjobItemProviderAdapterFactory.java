/**
 */
package org.sidiff.repair.model.repairjob.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.sidiff.repair.model.repairjob.util.RepairjobAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RepairjobItemProviderAdapterFactory extends RepairjobAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RepairjobItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.repair.model.repairjob.RepairJob} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepairJobItemProvider repairJobItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.repair.model.repairjob.RepairJob}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepairJobAdapter() {
		if (repairJobItemProvider == null) {
			repairJobItemProvider = new RepairJobItemProvider(this);
		}

		return repairJobItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.repair.model.repairjob.EditRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EditRuleItemProvider editRuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.repair.model.repairjob.EditRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEditRuleAdapter() {
		if (editRuleItemProvider == null) {
			editRuleItemProvider = new EditRuleItemProvider(this);
		}

		return editRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.repair.model.repairjob.RepairOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepairOperationItemProvider repairOperationItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.repair.model.repairjob.RepairOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepairOperationAdapter() {
		if (repairOperationItemProvider == null) {
			repairOperationItemProvider = new RepairOperationItemProvider(this);
		}

		return repairOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.repair.model.repairjob.PartialRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartialRuleItemProvider partialRuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.repair.model.repairjob.PartialRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartialRuleAdapter() {
		if (partialRuleItemProvider == null) {
			partialRuleItemProvider = new PartialRuleItemProvider(this);
		}

		return partialRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.repair.model.repairjob.SubRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubRuleItemProvider subRuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.repair.model.repairjob.SubRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubRuleAdapter() {
		if (subRuleItemProvider == null) {
			subRuleItemProvider = new SubRuleItemProvider(this);
		}

		return subRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.repair.model.repairjob.ComplementRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplementRuleItemProvider complementRuleItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.repair.model.repairjob.ComplementRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplementRuleAdapter() {
		if (complementRuleItemProvider == null) {
			complementRuleItemProvider = new ComplementRuleItemProvider(this);
		}

		return complementRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.repair.model.repairjob.RepairMatch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepairMatchItemProvider repairMatchItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.repair.model.repairjob.RepairMatch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepairMatchAdapter() {
		if (repairMatchItemProvider == null) {
			repairMatchItemProvider = new RepairMatchItemProvider(this);
		}

		return repairMatchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.repair.model.repairjob.RepairParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepairParameterItemProvider repairParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.repair.model.repairjob.RepairParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepairParameterAdapter() {
		if (repairParameterItemProvider == null) {
			repairParameterItemProvider = new RepairParameterItemProvider(this);
		}

		return repairParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.repair.model.repairjob.Change} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeItemProvider changeItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.repair.model.repairjob.Change}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeAdapter() {
		if (changeItemProvider == null) {
			changeItemProvider = new ChangeItemProvider(this);
		}

		return changeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.sidiff.repair.model.repairjob.Match} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchItemProvider matchItemProvider;

	/**
	 * This creates an adapter for a {@link org.sidiff.repair.model.repairjob.Match}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchAdapter() {
		if (matchItemProvider == null) {
			matchItemProvider = new MatchItemProvider(this);
		}

		return matchItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (repairJobItemProvider != null) repairJobItemProvider.dispose();
		if (editRuleItemProvider != null) editRuleItemProvider.dispose();
		if (repairOperationItemProvider != null) repairOperationItemProvider.dispose();
		if (partialRuleItemProvider != null) partialRuleItemProvider.dispose();
		if (subRuleItemProvider != null) subRuleItemProvider.dispose();
		if (complementRuleItemProvider != null) complementRuleItemProvider.dispose();
		if (repairMatchItemProvider != null) repairMatchItemProvider.dispose();
		if (repairParameterItemProvider != null) repairParameterItemProvider.dispose();
		if (changeItemProvider != null) changeItemProvider.dispose();
		if (matchItemProvider != null) matchItemProvider.dispose();
	}

}
