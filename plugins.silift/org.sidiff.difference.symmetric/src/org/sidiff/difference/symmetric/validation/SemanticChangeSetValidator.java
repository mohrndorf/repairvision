/**
 *
 * $Id$
 */
package org.sidiff.difference.symmetric.validation;

import org.eclipse.emf.common.util.EList;
import org.sidiff.difference.symmetric.Change;
import org.sidiff.difference.symmetric.EditRuleMatch;
import org.sidiff.difference.symmetric.FragmentJoin;
import org.sidiff.difference.symmetric.FragmentSplit;
import org.sidiff.difference.symmetric.SemanticChangeSet;

/**
 * A sample validator interface for {@link org.sidiff.difference.symmetric.SemanticChangeSet}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface SemanticChangeSetValidator {
	boolean validate();

	boolean validateChanges(EList<Change> value);
	boolean validateName(String value);
	boolean validatePriority(int value);
	boolean validateRecognitionRName(String value);
	boolean validateRefinementLevel(int value);
	boolean validateEditRName(String value);
	boolean validatePartiallyOverlappings(EList<SemanticChangeSet> value);
	boolean validateSubsets(EList<SemanticChangeSet> value);
	boolean validateSupersets(EList<SemanticChangeSet> value);
	boolean validateOverlayings(EList<SemanticChangeSet> value);
	boolean validateDescription(String value);
	boolean validateNumberOfACs(int value);
	boolean validateNumberOfParams(int value);
	boolean validateEditRuleMatch(EditRuleMatch value);
	boolean validateJoins(EList<FragmentJoin> value);
	boolean validateSplits(EList<FragmentSplit> value);
}
